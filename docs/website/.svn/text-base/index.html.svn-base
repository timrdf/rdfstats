<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>RDFStats &ndash; A Statistics Generator for RDF Documents and SPARQL Endpoints</title>
	<link rel="stylesheet" title="default style" href="styles.css"/>
</head>
<body>

<div id="pagebox">
<h1>RDFStats Manual for v2.0-beta</h1>
<p>Previous manuals are available as part of the corresponding source code.</p>
<p><strong>Important note:</strong> for v2.0 we temporarily dropped the feature of class-specific histogram generation. If you need class-specific histograms, you can checkout rev 10 from trunk and read the <a href="http://rdfstats.svn.sourceforge.net/viewvc/rdfstats/rdfstats/trunk/docs/website/index.html?revision=4">previous manual</a>.</p>

<h2>Contents</h2>

<ol>
<li><a href="#facts">Quick Facts</a></li>
<li><a href="#sample-statistics">Sample Statistics Document</a></li>
<li><a href="#vocab">Statistics Vocabulary</a></li>
<li><a href="#download">Download</a></li>
<li><a href="#usage-generate">Usage / Generation</a></li>
<li><a href="#usage-decode">Usage / Decoding</a></li>
<li><a href="#config-files">Using Configuration Files</a></li>
<li><a href="#api">RDFStatsModel and Histogram API</a></li>
<li><a href="#embedding">Embedding RDFStats</a></li>
<li><a href="#string-histograms">Note on String Histograms</a></li>
<li><a href="#open-issues">Open Issues</a></li>
<li><a href="#license">License</a></li>
<li><a href="#acknowledgements">Credits & Acknowledgements</a></li>
</ol>

<h2><a name="facts">Quick Facts</a></h2>

<ul>
<li>RDFStats generates statistics for datasets behind SPARQL-endpoints and RDF documents.</li>
<li>To stay as flexible as possible, the generator runs as a stand-alone process (e.g. beside a native RDF Store, <a href="http://www4.wiwiss.fu-berlin.de/bizer/d2r-server/">D2R-Server</a> instance or any other SPARQL end-point). It can also be embedded into other applications.</li>
<li>It is based on the <a target="_blank" href="http://jena.sourceforge.net">Jena</a> Semantic Web Framework.</li>
<li>It is basically part of <a href="http://semwiq.sourceforge.net">SemWIQ</a> and used by the federator and optimizer, but it is released separately because it is regarded as useful for other applications.</li>
<li>Statistics are generated by executing several SPARQL queries against an RDF document or SPARQL end-point (generation is costly and RDFStats should run as close as possible to the endpoint, best on the same host or subnet).</li>
<li>The <i>RDFStats statistics vocabulary</i> is based on <a href="http://sw.joanneum.at/scovo/schema.html">SCOVO</a> and published at <a href="http://purl.org/rdfstats/stats">http://purl.org/rdfstats/stats</a></li>
<li>The generated data includes:</li>
<ul>
<li>an URIHistogram over URI subjects</li>
<li>number of anonymous subjects (blank nodes)</li>
<li>a histogram for each property and associated range(s) (depending on the ranges of a property, there are different histograms available, e.g. integer/double/boolean/date/string histogram)</li>
</ul>
<li>Histograms are not RDF-coded, but base64-encoded strings (because all types have may have special meta data). As part of the JAR, there is a special <i>RDFStatsModel</i>&nbsp;interface (and factory&nbsp;<i>RDFStatsModelFactory</i>), which should be used to access histogram data,
see <a href="#usage-decode">Usage / Decoding</a>.</li>
</ul>

<h2><a name="sample-statistics">Sample Statistics Document</a></h2>

<p>A typical statistics document has a stats:RDFStatsDataset (sub-class of scv:Dataset) which represents a <code>stats:RDFDocument</code> or <code>stats:SPARQEndpoint</code> by its <code>stats:sourceUrl</code>:</p>

<pre>
_:b1  a       stats:RDFStatsDataset ;
      &lt;http://purl.org/dc/elements/1.1/creator&gt;
              &quot;dorgon@midearth&quot; ;
      &lt;http://purl.org/dc/elements/1.1/date&gt;
              &quot;2009-08-22T12:57:16.589Z&quot;^^&lt;http://www.w3.org/2001/XMLSchema#dateTime&gt; ;
      stats:sourceType stats:SPARQLEndpoint ;
      stats:sourceUrl &lt;http://localhost:8888/sparql&gt; .
</pre>

<p>The histograms are represented as SCOVO <emph>data items</emph>, linked to the dataset resource, and associated to several dimensions. 
For instance, a <code>stats:SubjectHistogram</code> looks like this:</p>

<pre>
[]    a       stats:SubjectHistogram ;
      &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#value&gt;
              &quot;&quot;&quot;ATKM/emz97IAAAAFaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI1Jlc291cmNl
A2h0dHA6Ly9leGFtcGxlLmNvbS9yZXNvdXJjZS9jb25mZXJlbmNlcy8yMzU0MQNodHRwOi8vZXhh
bXBsZS5jb20vcmVzb3VyY2UvdG9waWNzLzkDAAAAAAAAAAIAAAAAAAAACQAAAAAAAAAGAAAAAAAA
AAoAAAAAAAAADwAAAAAAAAACAAAAAAAAAAkAAAAAAAAABgAAAAAAAAAKAAAAAAAAAA9odHRwOi8v
ZXhhbXBsZS5jb20vcmVzb3VyY2UvY29uZmVyZW5jZXMDaHR0cDovL2V4YW1wbGUuY29tL3Jlc291
cmNlL29yZ2FuaXphdGlvbnMDaHR0cDovL2V4YW1wbGUuY29tL3Jlc291cmNlL3BhcGVycwNodHRw
Oi8vZXhhbXBsZS5jb20vcmVzb3VyY2UvcGVyc29ucwNodHRwOi8vZXhhbXBsZS5jb20vcmVzb3Vy
Y2UvdG9waWNzAw==&quot;&quot;&quot; ;
      &lt;http://purl.org/NET/scovo#dataset&gt;
              _:b1 ;
      stats:rangeDimension
              &lt;http://www.w3.org/2000/01/rdf-schema#Resource&gt; .
</pre>

<p>It has only a single dimension &lt;http://www.w3.org/2000/01/rdf-schema#Resource&gt;, which means the histogram refers to subject URI resources.</p>

<p>A <code>stats:PropertyHistogram</code> item may look like:</p>

<pre>
[]    a       stats:PropertyHistogram ;
      &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#value&gt;
              &quot;&quot;&quot;ATKM/TMuamQAAAAFaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjc3RyaW5nA0dlcm1h
bnkDVW5pdGVkIFN0YXRlcwMAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAAB
AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAUdlcm1hbnkDSXRhbHkDVGhl
IE5ldGhlcmxhbmRzA1VLA1VuaXRlZCBTdGF0ZXMD&quot;&quot;&quot; ;
      &lt;http://purl.org/NET/scovo#dataset&gt;
              _:b1 ;
      stats:propertyDimension
              &lt;http://www.w3.org/2001/vcard-rdf/3.0#Country&gt; ;
      stats:rangeDimension
              &lt;http://www.w3.org/2001/XMLSchema#string&gt; .
</pre>

<p>It has a property and range dimension. Here is the complete <a target="_blank" href="http://rdfstats.svn.sourceforge.net/viewvc/rdfstats/rdfstats/trunk/testing/iswc-example-stats.n3?revision=23">example.</a></p>

<h2><a name="vocab">Statistics Vocabulary</a></h2>

<p>The vocabulary is based on a simplified version of SCOVO and available at <a href="http://purl.org/rdfstats/stats">http://purl.org/rdfstats/stats</a>.</p>
<p>Note: we don't use instances per dimension and link instead directly to property and range URIs - see also <a href="http://code.google.com/p/void-impl/issues/detail?id=18">ISSUE 18</a>.</p>
<p>Also note that we don't use SCOVO to represent all the histogram buckets. It is also unclear if we will SCOVO in future at all. Until know we are not aware of generic tools that can parse and visualize SCOVO and since our
histograms are very specific types of statistical information, it is very unlikely that there will be any generic SCOVO parser for such histograms.</p>

<h2><a name="download">Download RDFStats Generator and Java Histogram Decoder</a></h2>

<p>Version v2.0 is currently in preparation, please be patient.</p>
<p>The newest version can be checked out from the <a href="http://sourceforge.net/scm/?type=svn&group_id=267630">Subversion repository</a>.</p>

<h2><a name="usage-generate">Usage: Statistics Generation</a></h2>

<p>For your convenience, there are shell scripts available in the /bin folder. Either use Linux/Mac OS X or Cygwin on Windows or 
compose the classpath manually adding all the jars from the /lib directory and execute <i>java -cp $CP rdfstats.generate</i>.</p>

<pre>
usage: parameters:
 -c,--config-file &lt;filename&gt;    RDFStats configuration file (either use
                                this and optionally -e OR only use the other command line parameters)
 -d,--document &lt;document-url&gt;   RDF document URL (format will be guessed by extension)
 -e,--endpoint &lt;endpoint-uri&gt;   SPARQL endpoint URI
 -f,--format &lt;key>              File format (RDF/XML, N3, or N-TRIPLES),
                                guessed based on file extension if omitted
 -m,--strhist-maxlen &lt;length&gt;   Maximum length of strings processed for
                                StringOrderedHistogram, default is 2147483647
 -o,--out &lt;filename&gt;            Model file (loaded if exsists as base
                                model; output is written to screen if omitted)
 -q,--quick                     Only generate histograms for new classes
                                or if the number of total instances has changed
 -s,--size &lt;size&gt;               Size of histograms (amount of bins), default is 50
 -t,--timezone &lt;timezone&gt;       The time zone to use when parsing date
                                values (default is your locale: Central European Time)
</pre>

<p>Example:</p>
<pre>
bin/generate -e <a href="http://localhost:8888/sparql" title="http://localhost:8888/sparql">http://localhost:8888/sparql</a> -o statistics.n3 -f N3 -s 50
</pre>

<p>The statistics will be written into statistics.n3.</p>

<h3>Debugging</h3>

<p><a target="_blank" href="http://logback.qos.ch/">Logback</a> is used over <a target="_blank" href="http://www.slf4j.org">SLF4J</a> as the logging framework,
but you can use any other frameworks by just replacing JARs as described <a target="_blank" href="http://www.slf4j.org/manual.html">here</a>.
To change the log configuration, edit <code>lib/logback/logback.xml</code>.</p>

<h2><a name="usage-decode">Usage: Decoding Statistics</a></h2>

<p>For a quick look into a statistics graph, you can use bin/decode:</p>
<pre>
usage: parameters:
 -c,--config &lt;filename&gt;         Configuration file
 -e,--endpoint &lt;endpoint-uri&gt;   Only print statistics for this endpoint URI
 -d,--document &lt;document-url&gt;   Only print statistics for this document URL
 -i,--in &lt;filename&gt;             Input RDF file or Web URI
 -f,--format &lt;format&gt;           Input format (RDF/XML, N3, or N-TRIPLES),
                                default: auto-detect based on file extension
 -t,--timezone &lt;timezone&gt;       The time zone to use when parsing date
                                values (default is your locale: Central European Time)
</pre>

<p>This just pretty-prints the statistics and histogram data to the screen.</p>

<p>To process the statistics in your application, you usually use the <i>RDFStatsModelFactory</i>:
to create an <em>RDFStatsModel:</em></p>

<pre>
RDFStatsModel m = RDFStatsModelFactory.create(&quot;file:statistics.n3&quot;, &quot;N3&quot;);
</pre>

<p>alternatively you can specify another Jena model as the wrapped model for RDFStatsModel:</p>

<pre>
Model m = ModelFactory.createDefaultModel();
m.read(&quot;file:statistics.n3&quot;, &quot;N3&quot;);
RDFStatsModel stats = RDFStatsModelFactory.create(m);
</pre>

<h2><a name="config-files">Using Configuration Files</a></h2>

<p>Instead of using command line parameters, RDFStats can be configured using RDF-based configuration files. 
The vocabulary for RDFStats configuration files can be found at 
<a href="http://purl.org/rdfstats/config">http://purl.org/rdfstats/config</a>. 
A sample configuration file is provided as part of the release in the root folder.</p>

<p>This is also useful when <a href="#embedding">embedding RDFStats</a> into your applications. If your applications also uses 
RDF-based configuration, you may even embedd RDFStats configuration data into your configuration and pass the model read from the 
filesystem (or Web) to the constructor of <i>RDFStatsConfiguration</i>.</p>

<h2><a name="api">RDFStatsModel and Histogram API</a></h2>

<p>Statistics and estimation functions are available via three interfaces:</p>
<ul>
<li><a href="#rdfstatsmodel">RDFStatsModel</a></li>
<li><a href="#rdfstatsdataset">RDFStatsDataset</a></li>
<li><a href="histogram">Histogram</a> and <a href="comparabledomainhistogram">ComparableDomainHistogram</a> (need to check with <code>instanceof</code> operator at runtime)</li>
</ul>

<p>An <code>RDFStatsDataset</code> can be obtained from the <a href="#rdfstatsmodel">RDFStatsModel</a> calling <code>getDataset(String sourceUrl)</code></p> 

<p>There are several other interfaces which are extended by those three. The instances are printed below:</p>

<a name="rdfstatsmodel"></a>
<pre>
public interface RDFStatsModel extends GlobalGraphStatistics {
	
	/** get the actual Jena model wrapped by the RDFStatsModel class */
	public Model getWrappedModel();

	/** get a list of all available SCOVO datasets describing RDF sources */
	public List&lt;RDFStatsDataset&gt; getDatasets();

	/** get the SCOVO dataset for an RDF source
	 * @throws RDFStatsModelException */
	public RDFStatsDataset getDataset(String sourceUrl) throws RDFStatsModelException;
	
	/** get subject histogram
	 * 
	 * @param sourceUrl of the dataset
	 * @param blankNodes if true, get GenericSingleBinHistogram over blank nodes
	 * @return the subject histogram if exists or null
	 */
	public Histogram&lt;String&gt; getSubjectHistogram(String sourceUrl, boolean blankNodes) throws RDFStatsModelException;

	/** get subject histogram as encoded string */
	public String getSubjectHistogramEncoded(String sourceUrl, boolean blankNodes) throws RDFStatsModelException;

	/**
	 * @param sourceUrl of the dataset
	 * @return list of all properties where histograms are available for */
	public List&lt;String&gt; getPropertyHistogramProperties(String sourceUrl);
	
	/**
	 * @param sourceUrl of the dataset
	 * @param rangeUri a specific range URI (e.g. http://www.w3.org/2001/XMLSchema#int or http://www.w3.org/2000/01/rdf-schema#Resource)
	 * @return list of all properties, given the property values' range (URI) where histograms are available for */
	public List&lt;String&gt; getPropertyHistogramProperties(String sourceUrl, String rangeUri);

	/**
	 * @param sourceUrl of the dataset
	 * @param property a specific property URI (e.g. http://xmlns.com/foaf/0.1/name or http://www.w3.org/1999/02/22-rdf-syntax-ns#type)
	 * @return list of all range URIs, given property p where histograms are available for */
	public List&lt;String&gt; getPropertyHistogramRanges(String sourceUrl, String property);
	
	/** get histogram for property, range URI
	 * 
	 * @param sourceUrl of the dataset (must not be null)
	 * @param p a property
	 * @param rangeUri
	 * @return the histogram if exists or null
	 */
	public Histogram&lt;?&gt; getPropertyHistogram(String sourceUrl, String p, String rangeUri) throws RDFStatsModelException;

	/** get histogram as encoded string */
	public String getPropertyHistogramEncoded(String sourceUrl, String p, String rangeUri) throws RDFStatsModelException;
}

public interface GlobalGraphStatistics {

	/** get datasets that possibly have information about r 
	 * @throws RDFStatsModelException */
	public List&lt;RDFStatsDataset&gt; getDatasetsDescribingResource(String r) throws RDFStatsModelException;

	/** get the set of all properties */
	public Set&lt;String&gt; getProperties();
}
</pre>

<p><a name="rdfstatsdataset">RDFStatsDataset:</a></p>
<pre>
public interface RDFStatsDataset extends JavaResourceView, GraphStatistics, QueryStatistics {

	public String getSourceType();	
	public String getSourceUrl();
	public String getCreator();
	public Calendar getCalendar();
	public Date getDate();

}

public interface JavaResourceView {

	public String getURI();
	public String getLocalName();
	public String getLabel();
	public Resource getWrappedResource();
	
}

public interface GraphStatistics {

	/** @return a list of all properties used */
	public Set&lt;String&gt; getProperties();
	
	/** @return total number of distinct subjects including blank nodes, exact value (no estimation) */
	public Long getSubjectsTotal() throws RDFStatsModelException;

	/** @return total number of blank nodes */
	public Long getAnonymousSubjectsTotal() throws RDFStatsModelException;

	/** @return total number of URI subjects */
	public Long getURISubjectsTotal() throws RDFStatsModelException;
	
	/** @return true if data source has no information about a subject (guaranteed), false positives possible, but no false negatives */
	public Boolean subjectNotExists(String uri) throws RDFStatsModelException;

// triple pattern estimation
	
	/** 
	 * @param s subject
	 * @param p predicate
	 * @param o object
	 * @return estimated amount of triples to expect from the triple pattern 
	 * @throws RDFStatsModelException */
	public Long triplesForPattern(Node s, Node p, Node o) throws RDFStatsModelException;
	
	/**
	 * @param s subject
	 * @param p predicate
	 * @param o object
	 * @param filter a list of filter expressions
	 * @return estimated amount of triples to expect from the filtered triple pattern 
	 * @throws RDFStatsModelException */
	public Long triplesForFilteredPattern(Node s, Node p, Node o, ExprList filter) throws RDFStatsModelException;

}

/**
 * each estimate function returns 3 values as an array with indexes:
 *   0: expected minimum triples
 *   1: expected average triples (good estimate)
 *   2: expected maximum triples (if this is 0, it is guaranteed that there are no false negatives but maybe false positives)
 */
public interface QueryStatistics {

	public Long[] triplesForBGP(BasicPattern bgp) throws RDFStatsModelException;
	public Long[] triplesForFilteredBGP(BasicPattern bgp, ExprList exprs) throws RDFStatsModelException;
	public Long[] triplesForQuery(String qry) throws RDFStatsModelException;
	public Long[] triplesForQuery(Query qry) throws RDFStatsModelException;
	public Long[] triplesForQueryPlan(Op plan) throws RDFStatsModelException;
	
}
</pre>

<p>There is also an extended model for the concurrent (multi-threaded) manipulation of data: the <b><i>RDFStatsUpdatableModel</i></b>:</p>

<pre>
public interface RDFStatsUpdatableModel extends RDFStatsModel {

	/** get the actual Jena model wrapped by the RDFStatsModel class
	 * 
	 * Attention! The obtained model must not be altered if other processes are
	 * may alter this model (usually using the exclusive write lock which may be
	 * obtained by requestExclusiveWriteLock(RDFStatsDataset ds);
	 * 
	 * @return the wrapped Jena model
	 */
	public Model getWrappedModel();		

// locking
	
	/**
	 * request exclusive write lock for an RDFStatsDataset
	 * 
	 * this is a simple lock for the complete updatable model which can only be acquired by one process at the same time
	 * an additional MRSW lock provided by Jena is used, so during this exclusive write lock, any other process may access the underlying
	 * RDFStatsModel as long as none of the actually updating (writing) methods are currently executing (because they are using the Jena Lock.WRITE)
	 * 
	 * The process must return the exclusive lock after it has finished the update process calling returnExclusiveWriteLock();
	 * 
	 * @param ds if null, request write lock for all statistics
	 */
	public void requestExclusiveWriteLock(RDFStatsDataset ds);
	
	/**
	 * @param ds if null, returns the write lock for all statistics
	 * returns the exclusive write lock
	 * @throws RDFStatsModelException 
	 */
	public void returnExclusiveWriteLock(RDFStatsDataset ds) throws RDFStatsModelException;

	
// modifications
	
	/**
	 * updates a dataset
	 * 
	 * @param ds
	 * @param creator
	 * @param date
	 * @return again the ds reference
	 * @throws RDFStatsModelException
	 */
	public RDFStatsDataset updateDataset(RDFStatsDataset ds, String creator, Calendar date) throws RDFStatsModelException;
	
	/**
	 * create a new dataset get the lock for it
	 * returns the new dataset reference which must be used for further calls to modifying methods
	 * 
	 * @param sourceUrl the URI (either to a document or SPARQL endpoint)
	 * @param sourceType URI reference to {@link Stats}.SPARQLEndpoint or .RDFDocument
	 * @param creator
	 * @param date
	 * @return the new dataset
	 * @throws RDFStatsModelException
	 */
	public RDFStatsDataset addDatasetAndLock(String sourceUrl, String sourceType, String creator, Calendar date) throws RDFStatsModelException;
	
	/** 
	 * removes SCOVO items which are part of the dataset ds and have not been changed since the last call to requestExclusiveLock()
	 * 
	 * @param ds if null, returns all unchanged items regardless of the dataset
	 * @return the number of removed items
	 * @throws RDFStatsModelException 
	 */
	public int removeUnchangedItems(RDFStatsDataset ds) throws RDFStatsModelException;

	/**
	 * explicitly tell the updatable model to keep this histogram when calling removeUnchangedItems(RDFStatsDataset ds);
	 * 
	 * @param dataset
	 * @param p
	 * @param rangeUri
	 * @throws RDFStatsModelException 
	 */
	public void keepPropertyHistogram(RDFStatsDataset dataset, String p, String rangeUri) throws RDFStatsModelException;

	/**
	 * explicitly tell the updatable model to keep this subject histogram when calling removeUnchangedItems(RDFStatsDataset ds);
	 * 
	 * @param dataset
	 * @param blankNodes
	 * @throws RDFStatsModelException 
	 */
	public void keepSubjectHistogram(RDFStatsDataset dataset, boolean blankNodes) throws RDFStatsModelException;

	/**
	 * create a new or update existing histogram for specific dataset, property, and rangeUri
	 *
	 * @param dataset
	 * @param p
	 * @param rangeUri
	 * @param encodedHistogram
	 * @throws RDFStatsModelException
	 */
	public boolean addOrUpdatePropertyHistogram(RDFStatsDataset dataset, String p, String rangeUri, String encodedHistogram) throws RDFStatsModelException;

	/**
	 * create a new or update existing subject histogram for specific dataset
	 *
	 * @param dataset
	 * @param blankNodes
	 * @param encodedHistogram
	 * @throws RDFStatsModelException
	 */
	public boolean addOrUpdateSubjectHistogram(RDFStatsDataset dataset, boolean blankNodes, String encodedHistogram) throws RDFStatsModelException;

	/** merge (optionally only newer) statistics from Model newModel into this model 
	 * 
	 * @param newModel the new model containing one or more RDFStats statistics datasets
	 * @param onlyNewer if true, statistics are only merged if the dc:date of a new dataset is newer than that of the possibly existing dataset for the same RDF source
	 * 
	 * @param return true if update fully succeeded, false if only partly
	 * @throws RDFStatsModelException
	 */
	public boolean updateFrom(RDFStatsModel newModel, boolean onlyNewer) throws RDFStatsModelException;
	
	/**
	 * merge (optionally only newer) statistics from Model newModel into this model
	 * similar to updateFrom(RDFStatsModel newModel, boolean onlyNewer, boolean deleteNonPresent), but restrict on datasets for sourceUrl
	 * 
	 * @param sourceUrl only import statistics for this RDF source
	 * @param newModel
	 * @param onlyNewer
	 * 
	 * @return true if import finished successfully
	 * @throws RDFStatsModelException
	 */
	public boolean updateFrom(String sourceUrl, RDFStatsModel newModel, boolean onlyNewer) throws RDFStatsModelException;

}
</pre>

<p>This is the <b>Histogram API</b>:</p>
<pre>
/**
 * @author dorgon
 *
 * A histogram using the NATIVE java type.
 * 
 * There are different implementations for different Java data types internally used like Integer, Float, String, etc.
 * Each histogram also stores the datatype URI from the original RDF node (see {@link RDF2JavaMapper}.getType(Node val))
 * 
 * Methods are either implemented by {@link AbstractHistogram} or by the concrete implementations (e.g. all methods
 * with NATIVE attributes are implemented specifically).
 */
public interface Histogram&lt;NATIVE&gt; {

	/** 
	 * @return total number of bins used (i.e. size of the histogram)
	 */
	public int getNumBins();
	
	/**
	 * @return histogram data as long[] (bin data)
	 */
	public long[] getBinData();

	/**
	 * @return data type URI of the source values (see {@link RDF2JavaMapper}.getType(Node val) for details on this URI)
	 */
	public String getDatatypeUri();
	
	/**
	 * @param idx the bin index
	 * @return absolute bin quantity (size of the bin with index idx)
	 */
	public long getBinQuantity(int idx);
	
	/**
	 * @param idx the bin index
	 * @return relative bin quantity (bin quantity / totalValues) in the range [0..1]
	 */
	public float getBinQuantityRelative(int idx);
	
	/**
	 * @param a NATIVE value
	 * @return estimated quantity for value; estimated value but at least 1 if there is any value in the bin
	 */
	public long getEstimatedQuantity(NATIVE val);
	
	/**
	 * @param a NATIVE value
	 * @return estimated relative quantity in the range [0..1]; estimated value, but at least &gt; 0 if there is any value in the bin
	 */
	public float getEstimatedQuantityRelative(NATIVE val);
	
	/**
	 * @return the total amount of values in the source distribution, also used as divisor for normalization
	 */
	public long getTotalValues();
	
	/**
	 * @return the number of distinct values in the source distribution
	 */
	public long getDistinctValues();
	
	/**
	 * @return true if the source values are unique (e.g. a primary key of a database)
	 */
	public boolean hasUniqueValues();
	
	/**
	 * @param a NATIVE value
	 * @return the bin index the NATIVE value goes into; returns -1 if the value is outside of the histogram data range
	 */
	public int getBinIndex(NATIVE val);

	/**
	 * parse a node value to native representation
	 * 
	 * this method must have a static version parseNodeValueImpl which can also be used by the
	 * corresponding HistogramBuilder without instantiating the concrete Histogram class
	 *
	 * @param val
	 * @return native Java type
	 * @throws ParseException
	 */
	public NATIVE parseNodeValue(Node val) throws ParseException;
}</pre>

<p>Histogram types with a comparable domain (metric scale) also implement:</p>

<pre>

	public NATIVE getMin();
	public NATIVE getMax();
	
	/**
	 * @param val a NATIVE value
	 * @return the cumulative quantity from 0 to a NATIVE value
	 */
	public long getCumulativeQuantity(NATIVE val);
	
	/**
	 * @param idx bin index
	 * @return the cumulative bin quantity from bin 0 to bin index idx
	 */
	public long getCumulativeBinQuantity(int idx);
	
	/**
	 * @param val a NATIVE value
	 * @return the cumulative relative quantity in the range [0..1]
	 */
	public float getCumulativeQuantityRelative(NATIVE val);
	
	/**
	 * @param idx bin index
	 * @return the cumulative relative quantity in the range [0..1]
	 */
	public float getCumulativeBinQuantityRelative(int idx);	
}
</pre>


<h2><a name="embedding">Embedding RDFStats into other Applications</a></h2>

<p>There are several possible ways how to embed RDFStats depending on your requirements. Both examples are illustrated in
class <i>at.faw.rdfstats.samples.EmbeddingSamples</i>.</p>

<h3>Monitor a set of endpoints</h3>

<p>This is similar to the standalone program, where you want to monitor several SPARQL endpoints and make the statistics 
available by a central RDFStatsModel, but it is embedded into your application. In this case, just use the class <i>GeneratorMultiple</i>
and supply an <i>RDFStatsConfiguration</i> object:</p>

<pre>
Model cfgModel = FileManager.get().loadModel(&quot;sample-config.ttl&quot;); // or use your application config model
RDFStatsConfiguration cfg = new RDFStatsConfiguration(cfgModel);
GeneratorMultiple multiGen = new GeneratorMultiple(cfg);
Model stats = multiGen.generate();
stats.commit(); // required when using FileModel with Jena assembler to flush all data to disk

// now access via RDFStatsModel API
RDFStatsModel s = RDFStatsModelFactory.create(stats);
Resource ds = s.getDataset(null);
ds.get...
</pre>

<p>The <i>RDFStatsModel stats</i> may be accessed by other processes (see <a href="#api">API</a>).</p>
<p>Another way is to use the <i>RDFStatsGeneratorSPARQL</i> (calling <i>RDFStatsGeneratorFactory.generatorSPARQL(String)</i>)
class which only fetches statistics for a single endpoint. If you don't have a configuration, just generate a default one like
in this example and specify an endpoint:</p>

<pre>
RDFStatsConfiguration conf = RDFStatsConfiguration.getDefault();
RDFStatsGeneratorSPARQL gen = RDFStatsGeneratorFactory.generatorSPARQL(conf, &quot;http://localhost:8888/sparql&quot;);
gen.generate();

// access data
RDFStatsModel s2 = RDFStatsModelFactory.create(conf.getStatsModel()); // model is referenced in configuration
s2.get...
</pre>

<h2><a name="string-histograms">Note on String Histograms</a></h2>

<p>It is generally not trivial to generate meaningful histograms for strings. This is mainly because of the fact, 
that strings cannot be mapped easily to a metric scale like real numbers or integers. It is also difficult to find 
literature about auto-scaling string histograms which was a major requirement for RDFStats (if you have pointers for 
me, I would be pleased to receive them!).</p>

<p>Basically, there are three approaches:</p>

<ol>
<li>no compression (big histograms, one bin for each distinct string)</li>
<li>hash compression</li> - order preserving??
<li>compression to common prefixes</li>
</ol>

<p>1. is implemented in SimpleStringHistogram which is used for URIs. Approach 3 is implemented in OrderedStringHistogram because it is 
order-preserving and the histogram size can be arbitrarily scaled based on occurring common prefixes. Approach 2 is not trival for the 
general case and sparse distributions with run-away values.</p>

<h2><a name="open-issues">Open Issues</a></h2>

<ul>
<li><strong>hash-based string histogram implementation</strong></li>
<li>better tuning and more intelligent algorithms for <b>auto-scaling histograms based on the source distribution</b> 
(e.g. using tree data structures to safe space, etc.)</li>
<li>...</li>
</ul>

<h2><a name="license">License</a></h2>

<p>RDFStats is licensed under <a target="_blank" href="http://www.apache.org/licenses/LICENSE-2.0">Apache Software License 2.0</a></p>

<h2><a name="acknowledgements">Acknowledgements</a></h2>

<p>Contact: 
<script type="text/javascript">
/*<![CDATA[*/
	document.writeln('<a href="'+'mai'+'lto:andreas');
	document.writeln('@');
	document.writeln('langegger'+'.'+'at">Andreas ');
	document.writeln('Langegger</a>');
/*]]>*/
</script>
aka AndyL</p>

<p>This work is funded by the Austrian BMBWK (<i>Federal Ministry for Education, Science and Culture</i>), contract GZ BMWF-10.220/0002-II/10/2007.</p>
<p>Thanks to SourceForge.net for providing the infrastructure.</p>
<img src="http://sourceforge.net/sflogo.php?group_id=267519&type=5" alt="SourceForge.net Logo" />
<p>&nbsp;</p>

</div>
</body>
</html>
